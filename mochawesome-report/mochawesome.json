{
  "stats": {
    "suites": 4,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2021-04-04T21:08:02.648Z",
    "end": "2021-04-04T21:08:03.115Z",
    "duration": 467,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "831d4ddb-ef1c-41b0-a3d0-d79bb2d9f7f1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "55e07ef3-627a-40dc-94d5-f22aba19ded1",
          "title": "Candidate API tests",
          "fullFile": "/home/juber/ait/continuos-delivery/donation-web/test/authapitest.js",
          "file": "/test/authapitest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Candidate API tests \"before each\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();",
              "err": {},
              "uuid": "36d78f5e-1fe9-4719-93b3-b3d70cf942cb",
              "parentUUID": "55e07ef3-627a-40dc-94d5-f22aba19ded1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "authenticate",
              "fullTitle": "Candidate API tests authenticate",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedUser = await donationService.createUser(newUser);\nconst response = await donationService.authenticate(newUser);\nassert(response.success);\nassert.isDefined(response.token);",
              "err": {},
              "uuid": "853295ba-a1b9-47cf-b74c-4d868db83885",
              "parentUUID": "55e07ef3-627a-40dc-94d5-f22aba19ded1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify Token",
              "fullTitle": "Candidate API tests verify Token",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedUser = await donationService.createUser(newUser);\nconst response = await donationService.authenticate(newUser);\nassert(response.success);\nconst userInfo = utils.decodeToken(response.token);\nassert.equal(userInfo.email, returnedUser.email);\nassert.equal(userInfo.userId, returnedUser._id);",
              "err": {},
              "uuid": "979fa4d2-ac06-4974-b3cf-cd88b6be50ac",
              "parentUUID": "55e07ef3-627a-40dc-94d5-f22aba19ded1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "853295ba-a1b9-47cf-b74c-4d868db83885",
            "979fa4d2-ac06-4974-b3cf-cd88b6be50ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
          "title": "Candidate API tests",
          "fullFile": "/home/juber/ait/continuos-delivery/donation-web/test/candidatesapitest.js",
          "file": "/test/candidatesapitest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Candidate API tests \"before all\" hook",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nconst returnedUser = await donationService.createUser(newUser);\nconst response = await donationService.authenticate(newUser);",
              "err": {},
              "uuid": "3452c66d-5c5c-44ae-9186-bf81c7c91946",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Candidate API tests \"before each\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllCandidates();",
              "err": {},
              "uuid": "eacda486-097f-4a57-956a-bd11a347d6cd",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Candidate API tests \"after all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\ndonationService.clearAuth();",
              "err": {},
              "uuid": "ff4b07d5-d8fe-4328-8f19-7c56d2619d51",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Candidate API tests \"after each\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllCandidates();",
              "err": {},
              "uuid": "848f053d-6e94-4922-90ee-049eba05dbaf",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create a candidate",
              "fullTitle": "Candidate API tests create a candidate",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nassert(_.some([returnedCandidate], newCandidate), 'returnedCandidate must be a superset of newCandidate');\nassert.isDefined(returnedCandidate._id);",
              "err": {},
              "uuid": "1d36d225-8612-41a9-991e-286dd77fba06",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get candidate",
              "fullTitle": "Candidate API tests get candidate",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const c1 = await donationService.createCandidate(newCandidate);\nconst c2 = await donationService.getCandidate(c1._id);\nassert.deepEqual(c1, c2);",
              "err": {},
              "uuid": "47652496-30e6-4598-9155-102dd4c79d44",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get invalid candidate",
              "fullTitle": "Candidate API tests get invalid candidate",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const c1 = await donationService.getCandidate('1234');\nassert.isNull(c1);\nconst c2 = await donationService.getCandidate('012345678901234567890123');\nassert.isNull(c2);",
              "err": {},
              "uuid": "bd9969a2-5735-4551-bd9b-fdc5acf04ef6",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete a candidate",
              "fullTitle": "Candidate API tests delete a candidate",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let c = await donationService.createCandidate(newCandidate);\nassert(c._id != null);\nawait donationService.deleteOneCandidate(c._id);\nc = await donationService.getCandidate(c._id);\nassert(c == null);",
              "err": {},
              "uuid": "81708f88-5ce2-493c-8929-c8183b6cf59f",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all candidates",
              "fullTitle": "Candidate API tests get all candidates",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let c of candidates) {\n  await donationService.createCandidate(c);\n}\nconst allCandidates = await donationService.getCandidates();\nassert.equal(allCandidates.length, candidates.length);",
              "err": {},
              "uuid": "c2d5075e-7dd9-4345-8d89-57d557bc769e",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get candidates detail",
              "fullTitle": "Candidate API tests get candidates detail",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (let c of candidates) {\n  await donationService.createCandidate(c);\n}\nconst allCandidates = await donationService.getCandidates();\nfor (var i = 0; i < candidates.length; i++) {\n  assert(_.some([allCandidates[i]], candidates[i]), 'returnedCandidate must be a superset of newCandidate');\n}",
              "err": {},
              "uuid": "d74b2f6f-24ea-41a5-bf9b-2178f3051e14",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all candidates empty",
              "fullTitle": "Candidate API tests get all candidates empty",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const allCandidates = await donationService.getCandidates();\nassert.equal(allCandidates.length, 0);",
              "err": {},
              "uuid": "8950956f-b47d-4b93-92fa-9f72d00f0e28",
              "parentUUID": "6a073d05-1da2-4903-bf54-b76ac9560fc7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d36d225-8612-41a9-991e-286dd77fba06",
            "47652496-30e6-4598-9155-102dd4c79d44",
            "bd9969a2-5735-4551-bd9b-fdc5acf04ef6",
            "81708f88-5ce2-493c-8929-c8183b6cf59f",
            "c2d5075e-7dd9-4345-8d89-57d557bc769e",
            "d74b2f6f-24ea-41a5-bf9b-2178f3051e14",
            "8950956f-b47d-4b93-92fa-9f72d00f0e28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
          "title": "Donation API tests",
          "fullFile": "/home/juber/ait/continuos-delivery/donation-web/test/donationsapitest.js",
          "file": "/test/donationsapitest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Donation API tests \"before all\" hook",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nconst returnedUser = await donationService.createUser(newUser);\nconst response = await donationService.authenticate(newUser);",
              "err": {},
              "uuid": "1b904c64-b1dd-4de7-be51-b237c4b1b180",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Donation API tests \"before each\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllDonations();",
              "err": {},
              "uuid": "0c739766-436c-4134-8764-a5a1fc9aabb9",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Donation API tests \"after all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\ndonationService.clearAuth();",
              "err": {},
              "uuid": "2f58e90c-9043-4658-ac31-e27216d1ef9b",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Donation API tests \"after each\" hook",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllDonations();",
              "err": {},
              "uuid": "d7dcb946-bc1d-4ac7-bd8f-767d1237c301",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create a donation",
              "fullTitle": "Donation API tests create a donation",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nawait donationService.makeDonation(returnedCandidate._id, donations[0]);\nconst returnedDonations = await donationService.getDonations(returnedCandidate._id);\nassert.equal(returnedDonations.length, 1);\nassert(_.some([returnedDonations[0]], donations[0]), 'returned donation must be a superset of donation');",
              "err": {},
              "uuid": "744ff523-8786-4990-9d5f-047410abd2bc",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create multiple donations",
              "fullTitle": "Donation API tests create multiple donations",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nfor (var i = 0; i < donations.length; i++) {\n  await donationService.makeDonation(returnedCandidate._id, donations[i]);\n}\nconst returnedDonations = await donationService.getDonations(returnedCandidate._id);\nassert.equal(returnedDonations.length, donations.length);\nfor (var i = 0; i < donations.length; i++) {\n  assert(_.some([returnedDonations[i]], donations[i]), 'returned donation must be a superset of donation');\n}",
              "err": {},
              "uuid": "e9244a71-73f8-487d-ba83-f0da551fc3d3",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete all donations",
              "fullTitle": "Donation API tests delete all donations",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nfor (var i = 0; i < donations.length; i++) {\n  await donationService.makeDonation(returnedCandidate._id, donations[i]);\n}\nconst d1 = await donationService.getDonations(returnedCandidate._id);\nassert.equal(d1.length, donations.length);\nawait donationService.deleteAllDonations();\nconst d2 = await donationService.getDonations(returnedCandidate._id);\nassert.equal(d2.length, 0);",
              "err": {},
              "uuid": "0decb117-9dd9-4894-b95c-8028e5b6f3b7",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete donations",
              "fullTitle": "Donation API tests delete donations",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nfor (var i = 0; i < donations.length; i++) {\n  await donationService.makeDonation(returnedCandidate._id, donations[i]);\n}\nawait donationService.deleteDonations(returnedCandidate._id);\nconst d = await donationService.getDonations(returnedCandidate._id);\nconsole.log(d);\nassert.equal(d.length, 0);",
              "err": {},
              "uuid": "6f5b869a-6b03-412e-8532-33a112e4e819",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create a donation and check donor",
              "fullTitle": "Donation API tests create a donation and check donor",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedCandidate = await donationService.createCandidate(newCandidate);\nawait donationService.makeDonation(returnedCandidate._id, donations[0]);\nconst returnedDonations = await donationService.getDonations(returnedCandidate._id);\nassert.isDefined(returnedDonations[0].donor);\nconst users = await donationService.getUsers();\nassert(_.some([users[0]], newUser), 'returnedUser must be a superset of newUser');",
              "err": {},
              "uuid": "3820357d-58b8-4c42-93e8-cd552a9ee96c",
              "parentUUID": "bed5779d-c0dc-416b-868a-fbddf8f0ae2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "744ff523-8786-4990-9d5f-047410abd2bc",
            "e9244a71-73f8-487d-ba83-f0da551fc3d3",
            "0decb117-9dd9-4894-b95c-8028e5b6f3b7",
            "6f5b869a-6b03-412e-8532-33a112e4e819",
            "3820357d-58b8-4c42-93e8-cd552a9ee96c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
          "title": "User API tests",
          "fullFile": "/home/juber/ait/continuos-delivery/donation-web/test/usersapitest.js",
          "file": "/test/usersapitest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "User API tests \"before all\" hook",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nconst returnedUser = await donationService.createUser(newUser);\nconst response = await donationService.authenticate(newUser);",
              "err": {},
              "uuid": "64fd8945-9198-43f2-aec2-37cee1be706f",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "User API tests \"after all\" hook",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\ndonationService.clearAuth();",
              "err": {},
              "uuid": "919470de-f650-4858-b3c8-156d1aa30aa8",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "create a user",
              "fullTitle": "User API tests create a user",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const returnedUser = await donationService.createUser(newUser);\nassert(_.some([returnedUser], newUser), 'returnedUser must be a superset of newUser');\nassert.isDefined(returnedUser._id);",
              "err": {},
              "uuid": "4cff44b1-de13-4aa1-91f5-9a8e51ed9205",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get user",
              "fullTitle": "User API tests get user",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const u1 = await donationService.createUser(newUser);\nconst u2 = await donationService.getUser(u1._id);\nassert.deepEqual(u1, u2);",
              "err": {},
              "uuid": "1621c664-1b4c-4edb-9ed1-6ddab1d3b3ba",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get invalid user",
              "fullTitle": "User API tests get invalid user",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const u1 = await donationService.getUser('1234');\nassert.isNull(u1);\nconst u2 = await donationService.getUser('012345678901234567890123');\nassert.isNull(u2);",
              "err": {},
              "uuid": "5e1f22eb-7477-4d95-aae3-47299fc90797",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete a user",
              "fullTitle": "User API tests delete a user",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let u = await donationService.createUser(newUser);\nassert(u._id != null);\nawait donationService.deleteOneUser(u._id);\nu = await donationService.getUser(u._id);\nassert(u == null);",
              "err": {},
              "uuid": "7f80a236-1964-4870-a93f-ec6c82eda803",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all users",
              "fullTitle": "User API tests get all users",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nawait donationService.createUser(newUser);\nawait donationService.authenticate(newUser);\nfor (let u of users) {\n  await donationService.createUser(u);\n}\nconst allUsers = await donationService.getUsers();\nassert.equal(allUsers.length, users.length + 1);",
              "err": {},
              "uuid": "e05358c4-3ba7-4cb4-b93f-a2bdf5fd79e0",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users detail",
              "fullTitle": "User API tests get users detail",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nconst user = await donationService.createUser(newUser);\nawait donationService.authenticate(newUser);\nfor (let u of users) {\n  await donationService.createUser(u);\n}\nconst testUser = {\n  firstName: user.firstName,\n  lastName: user.lastName,\n  email: user.email,\n  password: user.password\n};\nusers.unshift(testUser);\nconst allUsers = await donationService.getUsers();\nfor (var i = 0; i < users.length; i++) {\n  assert(_.some([allUsers[i]], users[i]), 'returnedUser must be a superset of newUser');\n}",
              "err": {},
              "uuid": "14e53952-0773-4ce2-9eba-2d6ac2bf5f84",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get all users empty",
              "fullTitle": "User API tests get all users empty",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await donationService.deleteAllUsers();\nconst user = await donationService.createUser(newUser);\nawait donationService.authenticate(newUser);\nconst allUsers = await donationService.getUsers();\nassert.equal(allUsers.length, 1);",
              "err": {},
              "uuid": "3ad68301-6553-43cc-85fd-058839859507",
              "parentUUID": "70d76d57-a68a-4fd8-bd9f-0adacb974b1a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4cff44b1-de13-4aa1-91f5-9a8e51ed9205",
            "1621c664-1b4c-4edb-9ed1-6ddab1d3b3ba",
            "5e1f22eb-7477-4d95-aae3-47299fc90797",
            "7f80a236-1964-4870-a93f-ec6c82eda803",
            "e05358c4-3ba7-4cb4-b93f-a2bdf5fd79e0",
            "14e53952-0773-4ce2-9eba-2d6ac2bf5f84",
            "3ad68301-6553-43cc-85fd-058839859507"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}